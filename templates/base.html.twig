<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>{% block title %}TicketFlow{% endblock %}</title>
    <style>
        :root {
            --max-width: 1440px;
            --primary-color: #3b82f6;
            --secondary-color: #1e40af;
            --success-color: #10b981;
            --warning-color: #f59e0b;
            --error-color: #ef4444;
            --gray-color: #6b7280;
            --status-open: #10b981;
            --status-in-progress: #f59e0b;
            --status-closed: #6b7280;
        }

        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', sans-serif;
            line-height: 1.6;
            color: #333;
        }

        .container {
            max-width: var(--max-width);
            margin: 0 auto;
            padding: 0 2rem;
        }

        .btn {
            padding: 12px 24px;
            border: none;
            border-radius: 8px;
            cursor: pointer;
            font-size: 16px;
            font-weight: 600;
            text-decoration: none;
            display: inline-block;
            text-align: center;
            transition: all 0.3s ease;
        }

        .btn-primary {
            background: var(--primary-color);
            color: white;
        }

        .btn-primary:hover {
            background: var(--secondary-color);
            transform: translateY(-2px);
        }

        .btn-secondary {
            background: transparent;
            color: var(--primary-color);
            border: 2px solid var(--primary-color);
        }

        .btn-secondary:hover {
            background: var(--primary-color);
            color: white;
        }

        .status-tag {
            padding: 4px 12px;
            border-radius: 20px;
            font-size: 12px;
            font-weight: bold;
            display: inline-block;
            color: white;
            text-transform: capitalize;
        }

        .status-open { background: var(--status-open); }
        .status-in_progress { background: var(--status-in-progress); }
        .status-closed { background: var(--status-closed); }

        @media (max-width: 768px) {
            .container {
                padding: 0 1rem;
            }
        }

        /* Toast styles */
        .toast {
            position: fixed;
            top: 20px;
            right: 20px;
            padding: 1rem 1.5rem;
            border-radius: 8px;
            color: white;
            z-index: 1000;
            max-width: 300px;
            box-shadow: 0 10px 25px rgba(0, 0, 0, 0.2);
        }

        .toast.success { background: var(--success-color); }
        .toast.error { background: var(--error-color); }
        .toast.warning { background: var(--warning-color); }

        /* Form styles */
        .form-group {
            display: flex;
            flex-direction: column;
            margin-bottom: 1.5rem;
        }

        .form-group label {
            font-weight: 600;
            margin-bottom: 0.5rem;
            color: #374151;
        }

        .form-group input,
        .form-group select,
        .form-group textarea {
            padding: 12px 16px;
            border: 2px solid #e5e7eb;
            border-radius: 8px;
            font-size: 16px;
            transition: border-color 0.3s ease;
            font-family: inherit;
        }

        .form-group input:focus,
        .form-group select:focus,
        .form-group textarea:focus {
            outline: none;
            border-color: var(--primary-color);
        }

        .input-error {
            border-color: var(--error-color) !important;
        }

        .error-message {
            color: var(--error-color);
            font-size: 14px;
            margin-top: 4px;
        }

        /* Toast styles - ADD THESE TO YOUR EXISTING TOAST STYLES */
        .toast {
            position: fixed;
            top: 20px;
            right: 20px;
            padding: 1rem 1.5rem;
            border-radius: 8px;
            color: white;
            z-index: 1000;
            max-width: 300px;
            box-shadow: 0 10px 25px rgba(0, 0, 0, 0.2);
            animation: slideIn 0.3s ease; /* ADD THIS LINE */
        }

        /* ADD THIS KEYFRAMES ANIMATION */
        @keyframes slideIn {
            from {
                transform: translateX(100%);
                opacity: 0;
            }
            to {
                transform: translateX(0);
                opacity: 1;
            }
        }

        .toast.success { background: var(--success-color); }
        .toast.error { background: var(--error-color); }
        .toast.warning { background: var(--warning-color); }

        /* ADD TOAST CLOSE BUTTON STYLES */
        .toast-close {
            background: none;
            border: none;
            color: white;
            font-size: 1.5rem;
            cursor: pointer;
            margin-left: 1rem;
            padding: 0;
            width: 24px;
            height: 24px;
            display: flex;
            align-items: center;
            justify-content: center;
            border-radius: 4px;
        }

        .toast-close:hover {
            background: rgba(255, 255, 255, 0.2);
        }

        .toast-content {
            display: flex;
            justify-content: space-between;
            align-items: center;
        }
    </style>
</head>
<body>
    {% block content %}{% endblock %}
    
 {% if toast %}
    <div class="toast {{ toast.type }}" id="globalToast">
        <div class="toast-content">
            <span>{{ toast.message }}</span>
            <button class="toast-close" onclick="closeToast()">Ã—</button>
        </div>
    </div>
    
    <script>
        // Auto-remove toast after 3 seconds
        setTimeout(() => {
            closeToast();
        }, 3000);

        function closeToast() {
            const toast = document.getElementById('globalToast');
            if (toast) {
                toast.remove();
            }
        }
    </script>
    {% endif %}

    <script>
        // Simple client-side form validation
        function validateTicketForm(form) {
            let isValid = true;
            const title = form.querySelector('[name="title"]');
            const status = form.querySelector('[name="status"]');
            
            // Clear previous errors
            form.querySelectorAll('.error-message').forEach(el => el.remove());
            form.querySelectorAll('.input-error').forEach(el => el.classList.remove('input-error'));
            
            if (!title.value.trim()) {
                showFieldError(title, 'Title is required');
                isValid = false;
            }
            
            if (!status.value) {
                showFieldError(status, 'Status is required');
                isValid = false;
            } else if (!['open', 'in_progress', 'closed'].includes(status.value)) {
                showFieldError(status, 'Invalid status value');
                isValid = false;
            }
            
            return isValid;
        }
        
        function showFieldError(field, message) {
            field.classList.add('input-error');
            const errorEl = document.createElement('div');
            errorEl.className = 'error-message';
            errorEl.textContent = message;
            field.parentNode.appendChild(errorEl);
        }
        
        function confirmDelete() {
            return confirm('Are you sure you want to delete this ticket?');
        }
        
        // Show toast messages from URL parameters
        document.addEventListener('DOMContentLoaded', function() {
            const urlParams = new URLSearchParams(window.location.search);
            const message = urlParams.get('message');
            const type = urlParams.get('type');
            
            if (message) {
                showToast(message, type || 'success');
            }
        });
        
        function showToast(message, type = 'success') {
            const toast = document.createElement('div');
            toast.className = `toast ${type}`;
            toast.textContent = message;
            document.body.appendChild(toast);
            
            setTimeout(() => {
                toast.remove();
            }, 3000);
        }

        // Simple client-side form validation
        function validateTicketForm(form) {
            let isValid = true;
            const title = form.querySelector('[name="title"]');
            const status = form.querySelector('[name="status"]');
            
            // Clear previous errors
            form.querySelectorAll('.error-message').forEach(el => el.remove());
            form.querySelectorAll('.input-error').forEach(el => el.classList.remove('input-error'));
            
            if (!title.value.trim()) {
                showFieldError(title, 'Title is required');
                isValid = false;
            }
            
            if (!status.value) {
                showFieldError(status, 'Status is required');
                isValid = false;
            } else if (!['open', 'in_progress', 'closed'].includes(status.value)) {
                showFieldError(status, 'Invalid status value');
                isValid = false;
            }
            
            return isValid;
        }
        
        function showFieldError(field, message) {
            field.classList.add('input-error');
            const errorEl = document.createElement('div');
            errorEl.className = 'error-message';
            errorEl.textContent = message;
            field.parentNode.appendChild(errorEl);
        }
        
        function confirmDelete() {
            return confirm('Are you sure you want to delete this ticket?');
        }
        
        // Show toast messages from URL parameters
        document.addEventListener('DOMContentLoaded', function() {
            const urlParams = new URLSearchParams(window.location.search);
            const message = urlParams.get('message');
            const type = urlParams.get('type');
            
            if (message) {
                showToast(message, type || 'success');
            }
        });
        
        function showToast(message, type = 'success') {
            const toast = document.createElement('div');
            toast.className = `toast ${type}`;
            toast.innerHTML = `
                <div class="toast-content">
                    <span>${message}</span>
                    <button class="toast-close" onclick="this.parentElement.parentElement.remove()">Ã—</button>
                </div>
            `;
            document.body.appendChild(toast);
            
            setTimeout(() => {
                if (toast.parentElement) {
                    toast.remove();
                }
            }, 3000);
        }
    </script>
</body>
</html>